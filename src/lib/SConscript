# PARTIO SOFTWARE
# Copyright 2010 Disney Enterprises, Inc. All rights reserved
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
# 
# * The names "Disney", "Walt Disney Pictures", "Walt Disney Animation
# Studios" or the names of its contributors may NOT be used to
# endorse or promote products derived from this software without
# specific prior written permission from Walt Disney Pictures.
# 
# Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.
# IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

import os
import sys

Import('env variant_build_abs variant_install_abs GetInstallPath')

libenv = env.Clone(CPPDEFINES=["GTO_STATIC", "GTO_SUPPORT_ZIP"],
                   CPPPATH=["../../gto/lib", "io/3rdParty/nextLimit"])

zlib_inc = libenv["ZLIB_INC_DIR"]
if not zlib_inc:
    zlib_inc = libenv["ZLIB_ROOT"]
    if zlib_inc:
        zlib_inc += "/include"

if zlib_inc:
    libenv.Append(CPPPATH=[zlib_inc])

if sys.platform != "win32":
    libenv.Append(CXXFLAGS=["-pthread"])
    libenv.Append(LINKFLAGS=["-pthread"])
else:
    libenv.Append(CPPDEFINES=["PARTIO_WIN32", "REGEX_STATIC", "_CRT_SECURE_NO_WARNINGS"],
                  CPPPATH=["../../gto/regex/src"])

thisdir = Dir(".").srcnode().abspath

def cppFiles(basePath, prefix):
    return [prefix + "/" + x for x in os.listdir(basePath + "/" + prefix) if x.endswith(".cpp")]

srcs = cppFiles(thisdir, "core") + \
       cppFiles(thisdir, "io") + \
       cppFiles(thisdir, "../../gto/lib/Gto") + \
       cppFiles(thisdir, "io/3rdParty/nextLimit")

if sys.platform == "win32":
    srcs.append("../../gto/regex/src/regex.c")

lib = libenv.Library("partio", srcs)

libenv.Install(variant_build_abs + "/include", "Partio.h")
libenv.Install(variant_build_abs + "/include", "PartioConfig.h")
libenv.Install(variant_build_abs + "/include", "PartioIterator.h")
libenv.Install(variant_build_abs + "/include", "PartioAttribute.h")
libenv.Install(variant_build_abs + "/lib", lib)

core_targets = [libenv.Install(variant_install_abs + "/include", "Partio.h"),
                libenv.Install(variant_install_abs + "/include", "PartioConfig.h"),
                libenv.Install(variant_install_abs + "/include", "PartioIterator.h"),
                libenv.Install(variant_install_abs + "/include", "PartioAttribute.h"),
                libenv.Install(variant_install_abs + "/lib", lib)]

env.Alias('core', core_targets)
