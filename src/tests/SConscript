# PARTIO SOFTWARE
# Copyright 2010 Disney Enterprises, Inc. All rights reserved
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
# 
# * The names "Disney", "Walt Disney Pictures", "Walt Disney Animation
# Studios" or the names of its contributors may NOT be used to
# endorse or promote products derived from this software without
# specific prior written permission from Walt Disney Pictures.
# 
# Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.
# IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
import os
import glob

Import('env variant_build_abs variant_install_abs')

envtests = env.Clone(CPPPATH=[variant_build_abs + "/include", "../lib"],
                     LIBPATH=["%s/lib" % variant_build_abs],
                     LIBS=["partio", env["ZLIB_LIB_NAME"]])

zlib_root = envtests["ZLIB_ROOT"]

zlib_inc = envtests["ZLIB_INC_DIR"]
if not zlib_inc and zlib_root:
    zlib_inc += zlib_root + "/include"

if zlib_inc:
    envtests.Append(CPPPATH=[zlib_inc])

zlib_lib = envtests["ZLIB_LIB_DIR"]
if not zlib_lib and zlib_root:
    zlib_lib += zlib_root + "/lib"

if zlib_lib:
    envtests.Append(LIBPATH=[zlib_lib])

# Find all .cpp's and make them into programs with same names as cpp
ignores = set(["testall.cpp"])  # don't compile this, it requires better env
thisdir = Dir(".").srcnode().abspath
mains = [x for x in os.listdir(thisdir) if x.endswith("_main.cpp") and x not in ignores]
targets = [x.replace("_main.cpp", "") for x in mains]

test_targets = []

for i in range(len(mains)):
    files = glob.glob(thisdir + "/" + mains[i].replace("_main.cpp", "*.cpp"))
    if len(files) == 0:
        continue
    target = targets[i]
    prog = envtests.Program(target, files)
    envtests.Install("../../tests", prog)
    test_targets.append(envtests.Install(variant_install_abs + "/tests", prog))

envtests.Alias('test', test_targets)
