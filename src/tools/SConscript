# PARTIO SOFTWARE
# Copyright 2010 Disney Enterprises, Inc. All rights reserved
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in
# the documentation and/or other materials provided with the
# distribution.
# 
# * The names "Disney", "Walt Disney Pictures", "Walt Disney Animation
# Studios" or the names of its contributors may NOT be used to
# endorse or promote products derived from this software without
# specific prior written permission from Walt Disney Pictures.
# 
# Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.
# IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
import os
import sys

Import('env variant_build_abs variant_install_abs')

envtools = env.Clone(CPPPATH=[variant_build_abs + "/include"],
                     LIBPATH="%s/lib" % variant_build_abs,
                     LIBS=["partio", env["ZLIB_LIB_NAME"]])

zlib_root = envtools["ZLIB_ROOT"]

zlib_inc = envtools["ZLIB_INC_DIR"]
if not zlib_inc and zlib_root:
    zlib_inc += zlib_root + "/include"

if zlib_inc:
    envtools.Append(CPPPATH=[zlib_inc])

zlib_lib = envtools["ZLIB_LIB_DIR"]
if not zlib_lib and zlib_root:
    zlib_lib += zlib_root + "/lib"

if zlib_lib:
    envtools.Append(LIBPATH=[zlib_lib])

# Find all .cpp's and make them into programs with same names as cpp
ignores = set(["partview.cpp", "partconvert.cpp"])
thisdir = Dir(".").srcnode().abspath
srcs = [x for x in os.listdir(thisdir) if x.endswith(".cpp") and x not in ignores]
targets = [x.replace(".cpp", "") for x in srcs]
tools = []

for i in range(len(srcs)):
    src = srcs[i]
    target = targets[i]
    prog = envtools.Program(target, [src])
    envtools.Install("../../bin", prog)
    tools.append(envtools.Install(variant_install_abs + "/bin", prog))

envglut = envtools.Clone()

glut_root = envglut["GLUT_ROOT"]

glut_inc = envglut["GLUT_INC_DIR"]
if not glut_inc and glut_root:
    glut_inc = glut_root + "/include"

if glut_inc:
    envglut.Append(CPPPATH=[glut_inc])

glut_lib = envglut["GLUT_LIB_DIR"]
if not glut_lib and glut_root:
    glut_lib = glut_root + "/lib"

if glut_lib:
    envglut.Append(LIBPATH=[glut_lib])

if envglut["mac"]:
    # Starting OSX 10.9, GLUT is deprecated, as warnings are treated as errors disable this warning
    envglut.Append(CPPFLAGS=" -Wno-deprecated-declarations")
    envglut.Append(LINKFLAGS=["-framework", "OpenGL", "-framework", "GLUT"])
else:
    if sys.platform == "win32":
        envglut.Append(LIBS=["opengl32", "glu32", envglut["GLUT_LIB_NAME"]])
    else:
        envglut.Append(LIBS=[envglut["GLUT_LIB_NAME"], "GL", "GLU"])

prog = envglut.Program("partview", ["partview.cpp"])
envglut.Install("../../bin", prog)
tools.append(envglut.Install(variant_install_abs + "/bin", prog))

if glut_root and sys.platform == "win32":
    dllpath = None
    dllname = envglut["GLUT_LIB_NAME"] + ".dll"
    path = glut_root + "/" + dllname
    if os.path.isfile(path):
        dllpath = path
    elif glut_lib:
        path = glut_lib + "/" + dllname
        if os.path.isfile(path):
            dllpath = path
    if dllpath:
        tools.append(envglut.Install(variant_install_abs + "/bin", dllpath))

env.Alias('tools', tools)
